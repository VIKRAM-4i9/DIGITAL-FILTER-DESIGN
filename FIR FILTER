// fir_filter.v - 4-Tap FIR Filter
`timescale 1ns / 1ps

module fir_filter (
    input clk,
    input reset,
    input [7:0] x_in,
    output reg [15:0] y_out
);
    // Filter Coefficients
    parameter signed [7:0] h0 = 8'd2,
                           h1 = 8'd4,
                           h2 = 8'd4,
                           h3 = 8'd2;

    reg [7:0] x[0:3];  // Delay line

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            x[0] <= 0; x[1] <= 0; x[2] <= 0; x[3] <= 0;
            y_out <= 0;
        end else begin
            // Shift inputs
            x[3] <= x[2];
            x[2] <= x[1];
            x[1] <= x[0];
            x[0] <= x_in;

            // FIR calculation
            y_out <= h0*x[0] + h1*x[1] + h2*x[2] + h3*x[3];
        end
    end
endmodule


#TESTBENCH


// tb_fir_filter.v - Testbench for FIR Filter
`timescale 1ns / 1ps

module tb_fir_filter;
    reg clk;
    reg reset;
    reg [7:0] x_in;
    wire [15:0] y_out;

    fir_filter uut (
        .clk(clk),
        .reset(reset),
        .x_in(x_in),
        .y_out(y_out)
    );

    // Clock generation
    always #5 clk = ~clk;

    initial begin
        $dumpfile("fir_filter.vcd");
        $dumpvars(0, tb_fir_filter);

        clk = 0; reset = 1; x_in = 0;
        #10 reset = 0;

        // Apply 8-bit inputs
        #10 x_in = 8'd10;
        #10 x_in = 8'd20;
        #10 x_in = 8'd30;
        #10 x_in = 8'd40;
        #10 x_in = 8'd50;
        #10 x_in = 8'd60;
        #10 x_in = 8'd70;
        #10 x_in = 8'd80;

        #20 $finish;
    end
endmodule
